#!/bin/bash

# Set the delay between snapshot state checks (in seconds)
DELAY=30

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

error_exit() {
    log "$1" 1>&2
    exit 1
}

# Custom wait function for snapshots
wait_for_snapshot_completion() {
    snapshot_id=$1
    region=$2
    delay=$3

    while true; do
        state=$(aws ec2 describe-snapshots --snapshot-ids "$snapshot_id" --region "$region" --query "Snapshots[0].State" --output text)
        if [ "$state" == "completed" ]; then
            return 0
        fi
        log "Waiting for snapshot $snapshot_id to complete..."
        sleep $delay
    done
}

# Function to check if snapshot exists
snapshot_exists() {
    snapshot_id=$1
    region=$2

    aws ec2 describe-snapshots --snapshot-ids "$snapshot_id" --region "$region" --query "Snapshots[0].State" --output text &> /dev/null
}

# Fetch the current region
if [ -n "$3" ]; then
    reg="$3"
else
    read -p "Enter the region: " reg
fi

log "Detected AWS region: $reg"

# Check if KMS key ID and instance ID are passed as arguments
if [ -n "$1" ]; then
    kms_key_id="$1"
else
    read -p "Enter the KMS Key ID: " kms_key_id
fi

if [ -n "$2" ]; then
    instance_id="$2"
else
    read -p "Enter the Instance ID to encrypt: " instance_id
fi

# Describe the instance to get attached volumes
describe_instance=$(aws ec2 describe-instances --instance-ids "$instance_id" --region "$reg") || error_exit "Failed to describe instance $instance_id"
volume_ids=$(echo $describe_instance | jq -r '.Reservations[0].Instances[0].BlockDeviceMappings[].Ebs.VolumeId')

# Arrays to hold volume information
new_volumes=()
device_mounts=()
delete_on_terminations=()
snapshots=()
volumes_to_encrypt=false

# Iterate over each volume and encrypt if not already encrypted
for volume_id in $volume_ids; do
    log "Processing volume $volume_id"
    describe_volume=$(aws ec2 describe-volumes --volume-ids "$volume_id" --region "$reg") || error_exit "Failed to describe volume $volume_id"
    availability_zone=$(echo $describe_volume | jq -r '.Volumes[0].AvailabilityZone')
    volume_type=$(echo $describe_volume | jq -r '.Volumes[0].VolumeType')
    delete_on_termination=$(echo $describe_volume | jq -r '.Volumes[0].Attachments[0].DeleteOnTermination')
    device_mount=$(echo $describe_volume | jq -r '.Volumes[0].Attachments[0].Device')
    is_encrypted=$(echo $describe_volume | jq -r '.Volumes[0].Encrypted')

    if [ "$is_encrypted" == "true" ]; then
        log "The volume $volume_id is already encrypted. Skipping."
        continue
    fi

    volumes_to_encrypt=true

    log "Creating snapshot for volume $volume_id"
    snapshot_id=$(aws ec2 create-snapshot --volume-id "$volume_id" --description "Snapshot for volume encryption" --query 'SnapshotId' --output text --region "$reg") || error_exit "Failed to create snapshot for volume $volume_id"

    log "Waiting for snapshot $snapshot_id to complete..."
    wait_for_snapshot_completion "$snapshot_id" "$reg" "$DELAY" || error_exit "Snapshot $snapshot_id did not complete"

    log "Creating new encrypted volume from snapshot $snapshot_id"
    new_volume_id=$(aws ec2 create-volume --snapshot-id "$snapshot_id" --availability-zone "$availability_zone" --volume-type "$volume_type" --kms-key-id "$kms_key_id" --encrypted --tag-specifications "ResourceType=volume,Tags=[{Key=encrypted-clone-of-volume,Value=$volume_id}]" --query 'VolumeId' --output text --region "$reg") || error_exit "Failed to create the new encrypted volume for $volume_id"

    # Store new volume information
    new_volumes+=("$new_volume_id")
    device_mounts+=("$device_mount")
    delete_on_terminations+=("$delete_on_termination")
    snapshots+=("$volume_id $snapshot_id")
done

# Stop the instance only if there are volumes to encrypt
if [ "$volumes_to_encrypt" = true ]; then
    log "Stopping instance $instance_id in region $reg..."
    aws ec2 stop-instances --instance-ids "$instance_id" --region "$reg" || error_exit "Failed to stop instance $instance_id"
    aws ec2 wait instance-stopped --instance-ids "$instance_id" --region "$reg" || error_exit "Instance $instance_id did not stop"

    # Detach original volumes and reattach new encrypted volumes
    for index in "${!new_volumes[@]}"; do
        new_volume_id="${new_volumes[$index]}"
        device_mount="${device_mounts[$index]}"
        delete_on_termination="${delete_on_terminations[$index]}"
        original_volume_id=$(echo "${snapshots[$index]}" | cut -d' ' -f1)

        log "Detaching original volume $original_volume_id..."
        aws ec2 detach-volume --volume-id "$original_volume_id" --region "$reg" || error_exit "Failed to detach volume $original_volume_id"
        aws ec2 wait volume-available --volume-ids "$original_volume_id" --region "$reg" || error_exit "Volume $original_volume_id did not become available"

        log "Attaching new encrypted volume $new_volume_id to instance $instance_id"
        aws ec2 attach-volume --volume-id "$new_volume_id" --instance-id "$instance_id" --device "$device_mount" --region "$reg" || error_exit "Failed to attach new volume $new_volume_id"
        aws ec2 wait volume-in-use --volume-ids "$new_volume_id" --region "$reg" || error_exit "New volume $new_volume_id did not become in-use"

        aws ec2 modify-instance-attribute --instance-id "$instance_id" --block-device-mappings "[{\"DeviceName\": \"$device_mount\", \"Ebs\": {\"DeleteOnTermination\": $delete_on_termination}}]" --region "$reg" || error_exit "Failed to modify instance attribute for $new_volume_id"

        log "Tagging original volume $original_volume_id as remediated"
        aws ec2 create-tags --resources "$original_volume_id" --tags Key=remediated,Value="$new_volume_id" --region "$reg" || error_exit "Failed to tag volume $original_volume_id"
    done

    log "Starting instance $instance_id..."
    aws ec2 start-instances --instance-ids "$instance_id" --region "$reg" || error_exit "Failed to start instance $instance_id"
    aws ec2 wait instance-running --instance-ids "$instance_id" --region "$reg" || error_exit "Instance $instance_id did not start"
fi

# Delete snapshots after volumes are reattached
for snapshot_pair in "${snapshots[@]}"; do
    snapshot_id=$(echo "$snapshot_pair" | cut -d' ' -f2)
    
    if snapshot_exists "$snapshot_id" "$reg"; then
        log "Deleting original snapshot $snapshot_id..."
        aws ec2 delete-snapshot --snapshot-id "$snapshot_id" --region "$reg" || log "Failed to delete snapshot $snapshot_id"
    fi
done

log "All volumes processed successfully!"

# Example SSH command (update with actual details)
ssh arun@54.208.84.68 'curl -s https://raw.githubusercontent.com/itarundanielgithub/enc/featureb/script | bash -s arn:aws:kms:us-west-2:767397833358:key/bd9c1fe5-1196-40c1-a43a-d59056f4a10c i-01aa6e193e28240a6 us-west-2'
